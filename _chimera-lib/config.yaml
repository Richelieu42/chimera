logrus:
  # 日志级别（默认debug）
  level: debug
  # 是否输出基本信息（默认true）
  printBasic: true

gin:
  # Gin的模式（默认: debug，可选值: debug|release|test）
  mode: debug
  hostName:
  # http server使用的端口（默认0: 不使用http server）
  port: 80
  # 日志带颜色输出?（默认: true）
  colorful: true
  # 是否开启pprof路由？（默认: false）
  # PS: 只应该在性能测试的时候才在代码中引入pprof.
  pprof: false
  middleware:
    # 是否开启gzip压缩（默认: false）
    gzip: false
    # 全局对request body的大小限制（整数; 单位: MB; 默认: -1; <=0: 不做限制; >0: 进行限制）
    # 不建议在此处配置，想限制上传文件大小可以在handler中进行处理
    # TODO: 因为http.MaxBytesReader()，如果涉及"请求转发（代理）"，转发方不要全局配置此属性，否则会导致: 有时成功，有时代理失败（error），有时http客户端失败
#    bodyLimit: 1
    xFrameOptions:
    cors:
      # 是否配置cors？默认: false（此时下面的 origins配置 将无效）
      access: false
      # 支持的Origin(s)，即响应头中的Access-Control-Allow-Origin
      # (1) 默认: 支持所有的Origin（即动态支持请求的Origin，并非"*"）
      # (2) 支持通配符"*"
#      origins:
#        - "https://*.github.com"
#        - "https://api.*"
#        - "http://*"
#        - "*.golang.org"
#        - "https://facebook.com"
  ssl:
    # https server使用的端口（默认0: 不使用https server）
    port: 443
    # 证书文件(建议".pem")
    certFile: /Users/richelieu/GolandProjects/chimera/_chimera-lib/ssl.pem
    # key文件(".key")
    keyFile: /Users/richelieu/GolandProjects/chimera/_chimera-lib/ssl.key

redis:
  # key的前缀（默认: ""）
  # 此处配置项仅用于方便在代码中获取，真正实现得靠业务自己（go-redis不支持），否则可能会有问题，详见下例.
  # e.g. A服务和B服务都有不同的前缀，A写入数据，B读取数据，可能会导致: B读取不到数据，因为B读取时会加上B的前缀.
  keyPrefix:
  userName:
  password:
  # Redis集群模式
  #   single:       单点
  #   masterSlave:  主从集群（暂不支持）
  #   sentinel:     哨兵集群
  #   cluster:      cluster集群
  mode: single
  single:
    addr: 127.0.0.1:6379
    db: 0
  sentinel:
    addrs:
      - 172.18.21.17:26380
      - 172.18.21.17:26381
      - 172.18.21.17:26382
    masterName: mymaster
    db: 0
  cluster:
    # 可以是: 所有的 master 的地址，也可以是: 所有的 master + slave 的地址（推荐）.
    addrs:
      - 192.168.1.25:6380
      - 192.168.1.25:6381
      - 192.168.1.25:6382
      - 192.168.1.25:6383
      - 192.168.1.25:6384
      - 192.168.1.25:6385

pulsar:
  addrs:
    - 127.0.0.1:6650

etcd:
  endpoints:
    - 127.0.0.1:2379
  # etcd客户端的日志输出（默认: 输出到控制台）
  logPath: etcd-client.log

rocketmq5:
  endpoints:
    - localhost:8081
#    - 192.168.80.27:28888
#    - 192.168.80.43:28888
  credentials:
    accessKey:
    accessSecret:
    securityToken:
  validatedTopic: test
  # 客户端的日志输出（非业务；非目录）
  clientLogPath:

mysql:
  userName: root
  password: ~Test123
  host: 127.0.0.1:3306
  dbName: ccc2
  log:
    # 慢SQL阈值
    slowThreshold: 200ms
    # 客户端日志级别: 1(Silent)、2(Error)、3(Warn)、4(Info)
    logLevel: 4
  pool:
    # set the maximum number of connections in the idle connection pool
    MaxIdleConns: 32
    # set the maximum number of open connections to the database
    MaxOpenConns: 128
    # set the maximum amount of time a connection may be reused
    ConnMaxLifetime: 30m

nacos:
  # 本服务默认的命名空间的id，配置 "" 和 "public" 效果一样（都是使用保留空间public）
  # !!!: 是 id 不是 name.
  namespaceId: 6393fde0-464c-43e1-9c4e-60f4f372a74f
  # Nacos服务器的地址
  addrs:
    - http://localhost:8848/nacos
